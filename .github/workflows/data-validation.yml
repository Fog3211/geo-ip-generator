name: Data Validation

on:
  schedule:
    # 每周一 UTC 03:00 运行（北京时间 11:00）
    - cron: '0 3 * * 1'
  workflow_dispatch: # 允许手动触发
    inputs:
      sample_size:
        description: 'Number of IPs to validate'
        required: false
        default: 100
        type: number

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  validate-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Setup database
      run: |
        # 使用现有数据库或创建临时数据库
        if [ ! -f "prisma/dev.db" ]; then
          export DATABASE_URL="file:./validation.db"
          pnpm run db:push
          pnpm run import:territories
          pnpm run import:ip2location
        fi

    - name: Run data validation
      env:
        SAMPLE_SIZE: ${{ github.event.inputs.sample_size || '100' }}
      run: |
        echo "🔍 开始验证IP数据质量..."
        pnpm run validate:data $SAMPLE_SIZE

    - name: Check validation results
      id: check_results
      run: |
        if [ -f "data/validation/latest-validation-summary.json" ]; then
          ACCURACY=$(jq -r '.summary.accuracyRate' data/validation/latest-validation-summary.json)
          ERROR_COUNT=$(jq -r '.errorCount' data/validation/latest-validation-summary.json)
          
          echo "accuracy=$ACCURACY" >> $GITHUB_OUTPUT
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          
          # 如果准确率低于85%，标记为需要关注
          if (( $(echo "$ACCURACY < 0.85" | bc -l) )); then
            echo "needs_attention=true" >> $GITHUB_OUTPUT
          else
            echo "needs_attention=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "needs_attention=true" >> $GITHUB_OUTPUT
          echo "accuracy=0" >> $GITHUB_OUTPUT
          echo "error_count=999" >> $GITHUB_OUTPUT
        fi

    - name: Upload validation reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-reports-${{ github.run_number }}
        path: |
          data/validation/
        retention-days: 30

    - name: Commit validation reports
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Data Validation Bot"
        
        if [ -d "data/validation" ]; then
          git add data/validation/latest-validation-summary.json
          
          ACCURACY=$(jq -r '.summary.accuracyRate' data/validation/latest-validation-summary.json 2>/dev/null || echo "0")
          TOTAL_SAMPLES=$(jq -r '.summary.totalSamples' data/validation/latest-validation-summary.json 2>/dev/null || echo "0")
          
          git commit -m "chore: update data validation report

          📊 Validation Summary:
          - Accuracy: $(echo "scale=1; $ACCURACY * 100" | bc)%
          - Samples: $TOTAL_SAMPLES
          - Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          🤖 Auto-generated by Data Validation" || echo "No changes to commit"
          
          git push origin HEAD:${{ github.ref_name }} || echo "Push failed, but continuing"
        fi

    - name: Create Issue for Low Accuracy
      if: steps.check_results.outputs.needs_attention == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const accuracy = parseFloat('${{ steps.check_results.outputs.accuracy }}');
          const errorCount = parseInt('${{ steps.check_results.outputs.error_count }}');
          const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          
          const title = `🚨 Data Validation Alert: Low Accuracy Detected`;
          
          const body = `# Data Validation Alert
          
          **⚠️ 数据质量警报：检测到准确率偏低**
          
          ## 📊 验证结果
          - **准确率**: ${(accuracy * 100).toFixed(1)}%
          - **错误数量**: ${errorCount}
          - **验证时间**: $(date)
          - **样本大小**: ${{ github.event.inputs.sample_size || '100' }}
          
          ## 🔍 可能原因
          1. 第三方API返回了不一致的结果
          2. 数据源更新导致的地区代码变化
          3. IP地址段分配发生变更
          4. 网络连接或API限制问题
          
          ## 📋 建议操作
          - [ ] 检查验证报告详情：[GitHub Actions Run](${runUrl})
          - [ ] 下载完整的验证日志进行分析
          - [ ] 检查数据源是否有更新
          - [ ] 验证第三方API服务状态
          - [ ] 考虑更新IP数据库
          
          ## 📎 相关文件
          - 验证报告将作为工作流附件提供
          - 错误详情保存在 \`data/validation/\` 目录
          
          **此问题由数据验证工作流自动创建。**`;
          
          // 检查是否已存在类似的开放issue
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['data-validation', 'automated']
          });
          
          const hasOpenValidationIssue = existingIssues.data.some(issue => 
            issue.title.includes('Data Validation Alert')
          );
          
          if (!hasOpenValidationIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['data-validation', 'automated', 'needs-investigation']
            });
          }

    - name: Post Success Summary
      if: steps.check_results.outputs.needs_attention == 'false'
      run: |
        ACCURACY=$(jq -r '.summary.accuracyRate' data/validation/latest-validation-summary.json)
        TOTAL_SAMPLES=$(jq -r '.summary.totalSamples' data/validation/latest-validation-summary.json)
        
        echo "✅ 数据验证通过！"
        echo "📊 准确率: $(echo "scale=1; $ACCURACY * 100" | bc)%"
        echo "🎯 样本数: $TOTAL_SAMPLES"
        echo "🕒 验证时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" 