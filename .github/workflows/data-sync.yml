name: Daily Data Sync

on:
  schedule:
    # Run daily at 02:00 UTC (10:00 Beijing time)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      force_update:
        description: 'Force update even if data is unchanged'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  DATABASE_URL: 'file:./sync.db'

permissions:
  contents: write

jobs:
  sync-data:
    runs-on: ubuntu-latest
    concurrency:
      group: data-sync-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Setup database
      env:
        DATABASE_URL: "file:./sync.db"
      run: |
        # Create a temporary database for data sync and persist env for next steps
        echo "DATABASE_URL=file:./sync.db" >> $GITHUB_ENV
        pnpm run db:push

    - name: Run data synchronization
      env:
        FORCE_UPDATE: ${{ github.event.inputs.force_update || 'false' }}
      run: |
        # Run the data sync script (backup/update/rollback included)
        pnpm run data:sync

    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet data/; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in data directory"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Detected changes in data directory"
        fi

    - name: Configure Git
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        # Set custom commit author and committer for bot
        git config --local user.name "GeoIP Data Bot"
        # Use GitHub Actions bot noreply email to keep the robot avatar
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        export GIT_AUTHOR_NAME="GeoIP Data Bot"
        export GIT_AUTHOR_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
        export GIT_COMMITTER_NAME="GeoIP Data Bot"
        export GIT_COMMITTER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"

    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        # Get current timestamp
        TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
        
        # Stage all data files
        git add data/
        
        # Commit changes (explicit author info)
        git commit --author="GeoIP Data Bot <41898282+github-actions[bot]@users.noreply.github.com>" -m "chore: update geo-ip data - ${TIMESTAMP}

        📊 Data sync summary:
        - Updated at: $(date '+%Y-%m-%d %H:%M:%S UTC')
        - Territories: $(jq '.metadata.countries' data/combined-geo-ip-data.json)
        - IP ranges: $(jq '.metadata.ipRanges' data/combined-geo-ip-data.json)
        - Data size: $(jq -r '.metadata.dataSize' data/combined-geo-ip-data.json)
        
        🤖 Auto-generated by GitHub Actions"
        
        # Push to remote using default GITHUB_TOKEN
        git push origin HEAD:${GITHUB_REF_NAME}

    - name: Prepare daily release metadata
      run: |
        DATE_UTC="$(date '+%Y-%m-%d %H:%M:%S UTC')"
        DATE_TAG="$(date '+%Y.%m.%d')"
        echo "DATE_UTC=${DATE_UTC}" >> $GITHUB_ENV
        echo "RELEASE_TAG=data-v${DATE_TAG}" >> $GITHUB_ENV
        echo "RELEASE_NAME=📊 Geo IP Data ${DATE_TAG}" >> $GITHUB_ENV
        
        # Check if data files exist, if not use default values
        if [ -f "data/combined-geo-ip-data.json" ]; then
          COUNTRIES=$(jq '.metadata.countries' data/combined-geo-ip-data.json)
          RANGES=$(jq '.metadata.ipRanges' data/combined-geo-ip-data.json)
          SIZE=$(jq -r '.metadata.dataSize' data/combined-geo-ip-data.json)
          DATA_STATUS="✅ Updated"
        else
          COUNTRIES="N/A"
          RANGES="N/A" 
          SIZE="N/A"
          DATA_STATUS="⚠️ No data changes"
        fi
        
        HAS_CHANGES="${{ steps.check_changes.outputs.changes }}"
        
        cat > release_body.md << EOF
        # 🌍 Daily Geo IP Data Release
        
        **Release Date**: ${DATE_UTC}  
        **Status**: ${DATA_STATUS}  
        **Data Changes**: ${HAS_CHANGES}
        
        ## 📊 Data Statistics
        - **Countries/Regions**: ${COUNTRIES}
        - **IP Ranges**: ${RANGES}
        - **Data Size**: ${SIZE}
        
        ## 📥 Download Links
        - [JSON Format](https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/combined-geo-ip-data.json)
        - [Minified JSON](https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/combined-geo-ip-data.min.json)
        - [CSV Format](https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/combined-geo-ip-data.csv)
        - [Excel Format](https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/combined-geo-ip-data.xlsx)
        
        ## 🔗 API Access
        \`\`\`
        # Latest data (raw.githubusercontent.com)
        https://raw.githubusercontent.com/${{ github.repository }}/main/data/combined-geo-ip-data.json
        
        # This release (GitHub Releases)
        https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/combined-geo-ip-data.json
        \`\`\`
        
        ## 📚 Data Sources
        - **Territories**: [mledoze/countries](https://github.com/mledoze/countries)
        - **IP Ranges**: [IP2Location LITE](https://www.ip2location.com/)
        
        ---
        🤖 **Auto-generated daily release by GitHub Actions**
        EOF

    - name: Create daily release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: ${{ env.RELEASE_NAME }}
        body_path: release_body.md
        files: |
          data/combined-geo-ip-data.json
          data/combined-geo-ip-data.min.json
          data/combined-geo-ip-data.csv
          data/combined-geo-ip-data.xlsx
        draft: false
        prerelease: false
        make_latest: true

    - name: Upload daily artifacts
      uses: actions/upload-artifact@v4
      with:
        name: geo-ip-data-$(date '+%Y%m%d')
        path: |
          data/combined-geo-ip-data.json
          data/combined-geo-ip-data.min.json
          data/combined-geo-ip-data.csv
          data/combined-geo-ip-data.xlsx
          data/sync-report.json
          data/backups/
        retention-days: 30
        if-no-files-found: warn

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Data sync failed. Rollback to backup version has been performed."
        echo "📧 Please check GitHub Actions logs for details."